/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   debug.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: shurtado <shurtado@student.42barcelona.fr> +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/29 12:27:32 by shurtado          #+#    #+#             */
/*   Updated: 2024/09/30 17:30:09 by shurtado         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"

void	show_debug(t_ms *ms)
{
	int		i;
	char	**av;

	i = 0;
	av = ms->av;

	while (av[i])
	{
		printf("av[%d]: %s \n", i, av[i]);
		i++;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   execs.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: shurtado <shurtado@student.42barcelona.fr> +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/25 20:04:36 by shurtado          #+#    #+#             */
/*   Updated: 2024/10/03 18:31:30 by shurtado         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"

void remove_cmd_args(char **av)
{
	int i = 0;
	int j;

	// Eliminar el comando y sus argumentos (hasta un pipe o el final del array)
	while (av[i] && strcmp(av[i], "|"))  // Hasta encontrar un pipe
	{
		free(av[i]);  // Liberar el comando o argumento
		i++;
	}

	// Si hay un pipe en la posición av[i], lo dejamos (se parará el bucle antes del pipe)
	if (av[i] && !strcmp(av[i], "|"))
	{
		free(av[i]);  // Liberar el pipe si lo encontramos
		i++;
	}

	// Mover los elementos restantes para eliminar los vacíos
	j = 0;
	while (av[i])  // Mover los elementos restantes a la izquierda
	{
		av[j] = av[i];
		j++;
		i++;
	}
	av[j] = NULL;  // Marcar el final del array
}
void	remove_redirections(char **av)
{
	int		i;
	int		j;

	i = 0;
	while (av[i] && strcmp(av[i], PIPE_S))
	{
		if (is_special(av[i]))
		{
			j = i;
			free(av[i]);
			free(av[i + 1]);
			while (av[j + 2])
			{
				av[j] = av[j + 2];
				j++;
			}
			av[j] = NULL;
			av[j + 1] = NULL;
		}
		else
			i++;
	}
}

bool	is_last_cmd(char **av)
{
	int	i;

	i = 0;
	while (av[i])
	{
		if (has_redirection(av + i, PIPE_S) || \
			has_redirection(av + i, DOUBLE_MORE) || \
			has_redirection(av + i, MORE_S))
			return (false);
		i++;
	}
	return (true);
}

char	*getpath(t_hash *env, char *file)
{
	char	*path;
	char	**paths;
	int		i;
	char	*temp;

	path = strdup(lookup_hash(env, "PATH"));
	if (!path)
		return (NULL);
	paths = ft_split(path, ':');
	free (path);
	i = 0;
	while (paths[i])
	{
		temp = ft_strjoin(paths[i], "/");
		path = ft_strjoin(temp, file);
		free(temp);
		if (!access(path, F_OK | X_OK | R_OK))
		{
			free_array(paths);
			return (path);
		}
		free(path);
		path = NULL;
		i++;
	}
	free_array(paths);
	return (NULL);
}

int	process_line(t_ms *ms)
{
	int		fd_pipe[2];
	int		is_last;
	char	*path;

	ms->fd_in = STDIN_FILENO;
	is_last = 0;
	while (ms->av && ms->av[0])
	{
		if (is_last_cmd(ms->av))
			is_last = 1;
		if (setup_redirections(ms))
			remove_redirections(ms->av);
		path = getpath(ms->env, ms->av[0]);
		if (!path && !is_builtin(ms->av[0]))
		{
			fprintf(stderr, "minishell: command not found: %s\n", ms->av[0]);
			return (127);
		}
		if (has_redirection(ms->av, PIPE_S) || (is_last = 1 && !has_redirection(ms->av, MORE_S) && !has_redirection(ms->av, DOUBLE_MORE)))
			process_pipe(ms, fd_pipe, is_last);
		execute_command(ms, path, 0);
		free(path);
		remove_cmd_args(ms->av);
	}
	return (wait_for_last_process(ms));
}

void	execute_command(t_ms *ms, char *path, int move)
{
	pid_t	pid;
	char	*args[50];
	int		i;

	i = 0;
	while (ms->av[i] && ft_strcmp(ms->av[i], PIPE_S))
	{
		args[i] = ms->av[i];
		i++;
	}
	args[i] = NULL;
	pid = fork();
	if (pid == -1)
		perror("Error no fork at execute_comand");
	if (pid == 0)
	{
		if (ms->fd_in != STDIN_FILENO)
			dup2(ms->fd_in, STDIN_FILENO);
		if (ms->fd_out != STDOUT_FILENO)
			dup2(ms->fd_out, STDOUT_FILENO);
		if (is_builtin(ms->av[move]))
			exit (exec_builtin(ms));
		else
			execve(path, args, ms->crude_env);
	}
	ms->last_pid = pid;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   pipe.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: shurtado <shurtado@student.42barcelona.fr> +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/02 17:41:03 by shurtado          #+#    #+#             */
/*   Updated: 2024/10/02 19:14:01 by shurtado         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"

void	process_pipe(t_ms *ms, int fd_pipe[2], int is_last)
{
	if (!is_last && pipe(fd_pipe) == -1)
		perror("Error at process_pipe");
	if (is_last)
		ms->fd_out = STDOUT_FILENO;
	else
	{
		ms->fd_out = fd_pipe[1];
		ms->fd_in = fd_pipe[0];
	}
}

int	wait_for_last_process(t_ms *ms)
{
	int	status;

	waitpid(ms->last_pid, &status, 0);
	if (WIFEXITED(status))
		return (WEXITSTATUS(status));
	else if (WIFSIGNALED(status))
		return (WTERMSIG(status) + 128);
	return (status);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   redirect.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: shurtado <shurtado@student.42barcelona.fr> +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/25 21:07:00 by shurtado          #+#    #+#             */
/*   Updated: 2024/10/03 16:52:31 by shurtado         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"

#define ERRFILE "minishell: syntax error near unexpected token `%s`\n"

bool	has_redirection(char **av, char *redir)
{
	int	i;

	i = 0;
	if (!av || !av[0])
		return (false);
	while (av[i])
	{
		if (!strcmp(av[i], redir))
			return (true);
		i++;
	}
	return (false);
}

bool	setup_redirections(t_ms *ms)
{
	int	result;

	ms->fd_in = STDIN_FILENO;
	ms->fd_out = STDOUT_FILENO;
	result = 0;
	result += handle_input_redirection(ms);
	result += handle_output_trunc_redirection(ms);
	result += handle_output_append_redirection(ms);
	result += handle_heredoc_redirection(ms);

	if (ms->fd_in == -1 || ms->fd_out == -1)
		perror("Error en setup_redirections");
	return (result);
}

char	*get_filename(char **av, char *redir)
{
	int	i;

	i = 0;
	while (av[i])
	{
		if (!strcmp(av[i], redir))
		{
			if (av[i + 1])
				return (strdup(av[i + 1]));
			else
			{
				fprintf(stderr, ERRFILE, redir);
				return (NULL);
			}
		}
		i++;
	}
	return (NULL);
}

int	handle_heredoc(char *delimiter)
{
	int		pipe_fd[2];
	char	*line;

	if (pipe(pipe_fd) == -1)
		perror("pipe error on handle_heredoc");
	while (1)
	{
		line = readline("> ");
		if (!line)
			break ;
		if (!strcmp(line, delimiter))
		{
			free(line);
			break ;
		}
		ft_putstr_fd(line, pipe_fd[1]);
		ft_putstr_fd("\n", pipe_fd[1]);
		free(line);
	}
	close(pipe_fd[1]);
	return (pipe_fd[0]);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   redir_util.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: shurtado <shurtado@student.42barcelona.fr> +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/10/02 18:50:34 by shurtado          #+#    #+#             */
/*   Updated: 2024/10/03 16:12:48 by shurtado         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"

bool	handle_input_redirection(t_ms *ms)
{
	char	*filename;

	if (has_redirection(ms->av, "<"))
	{
		filename = get_filename(ms->av, "<");
		ms->fd_in = open(filename, O_RDONLY);
		free(filename);
		return (true);
	}
	return (false);
}

bool	handle_output_trunc_redirection(t_ms *ms)
{
	char	*filename;

	if (has_redirection(ms->av, ">"))
	{
		filename = get_filename(ms->av, ">");
		ms->fd_out = open(filename, O_WRONLY | O_CREAT | O_TRUNC, 0644);
		free(filename);
		return (true);
	}
	return (false);
}

bool	handle_output_append_redirection(t_ms *ms)
{
	char	*filename;

	if (has_redirection(ms->av, ">>"))
	{
		filename = get_filename(ms->av, ">>");
		ms->fd_out = open(filename, O_WRONLY | O_CREAT | O_APPEND, 0644);
		free(filename);
		return (true);
	}
	return (false);
}

bool	handle_heredoc_redirection(t_ms *ms)
{
	char	*filename;

	if (has_redirection(ms->av, "<<"))
	{
		filename = get_filename(ms->av, "<<");
		ms->fd_in = handle_heredoc(filename);
		free(filename);
		return (true);
	}
	return (false);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   simple.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: shurtado <shurtado@student.42barcelona.fr> +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/25 20:09:31 by shurtado          #+#    #+#             */
/*   Updated: 2024/10/02 19:13:11 by shurtado         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"

bool	is_builtin(char *cmd)
{
	if (!ft_strcmp(cmd, "echo") || !ft_strcmp(cmd, "env") || \
			!ft_strcmp(cmd, "cd") || !ft_strcmp(cmd, "exit") || \
			!ft_strcmp(cmd, "export") || !ft_strcmp(cmd, "pwd") || \
			!ft_strcmp(cmd, "unset") || !ft_strcmp(cmd, "debug"))
	{
		return (true);
	}
	return (false);
}

int	exec_builtin(t_ms *ms)
{
	char	*blt;

	blt = ms->av[0];
	if (!strcmp(blt, "echo"))
		return (blt_echo(ms->av));
	else if (!strcmp(blt, "env"))
		return (blt_env(ms->env));
	else if (!strcmp(blt, "cd"))
		return (blt_cd(ms->av, ms->env));
	else if (!strcmp(blt, "exit"))
		return (blt_exit(ms));
	else if (!strcmp(blt, "export"))
		return (blt_export(ms->av, ms->env));
	else if (!strcmp(blt, "pwd"))
		return (blt_pwd());
	else if (!strcmp(blt, "unset"))
		return (blt_unset(ms->av, ms->env));
	else if (!strcmp(blt, "debug"))
		show_debug(ms);
	else
		return (-1);
	return (0);
}
